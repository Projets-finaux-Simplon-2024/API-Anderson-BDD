name: Docker Build, Test, and Push

on:
  push:
    branches: [ "main" ]

permissions:
  packages: write
  contents: write

env:
  REGISTRY: ghcr.io
  IMAGE_NAME: ${{ github.repository }}

jobs:
  build:
    runs-on: ubuntu-latest

    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Set up Python
        uses: actions/setup-python@v4
        with:
          python-version: '3.12.2'  # Mettez la même version de Python que celle utilisée en local

      - name: Install dependencies
        run: |
          python -m pip install --upgrade pip
          pip install -r requirements-docker.txt

      - name: Run tests
        run: pytest
        env:
          TESTING: true
          SUPER_USER: superuser
          SUPER_PASSWORD: $2b$12$j9jsBsgf87konm6b5qxnr.OK2xZOLIVPDULPCfkjfML7ZYn7FjT2O
          SECRET_KEY: 75bdaa1397df51c94112f76b70cd62221b3bd97fd9ae35d07edc5fcd02dff068
          ALGORITHM: HS256
          ACCESS_TOKEN_EXPIRE_MINUTES: 30
          MINIO_URL: localhost:9000
          MINIO_ACCESS_KEY: minioadmin
          MINIO_SECRET_KEY: minioadmin
          MLFLOW_TRACKING_URI: "http://localhost:5000"
          MLFLOW_DEFAULT_ARTIFACT_ROOT: "s3://mlflow/artifacts"
          AWS_ACCESS_KEY_ID: minioadmin
          AWS_SECRET_ACCESS_KEY: minioadmin
          MLFLOW_S3_ENDPOINT_URL: "http://localhost:9000"

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3

      - name: Log in to GitHub Packages
        run: |
          echo "${{ secrets.GITHUB_TOKEN }}" | docker login ghcr.io -u ${{ github.actor }} --password-stdin

      - name: Extract Docker metadata
        id: meta
        uses: docker/metadata-action@v5
        with:
          images: ${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}

      - name: Build and push Docker image
        id: build-and-push
        uses: docker/build-push-action@v5
        with:
          context: .
          push: true
          tags: ${{ steps.meta.outputs.tags }}
          labels: ${{ steps.meta.outputs.labels }}
          cache-from: type=gha
          cache-to: type=gha,mode=max
